<?php

namespace common\models;

use soft\behaviors\TimestampConvertorBehavior;
use Yii;

/**
 * This is the model class for table "make_product".
 *
 * @property int $id
 * @property int $employee_id
 * @property int $product_id
 * @property string|null $size
 * @property int|null $produced_id
 * @property int|null $shape_id
 * @property int|null $type_id
 * @property int $created_at
 * @property int $updated_at
 * @property int $created_by
 * @property int $updated_by
 *
 * @property User $createdBy
 * @property Employees $employee
 * @property ProductList $produced
 * @property ProductList $product
 * @property Shapes $shape
 * @property User $updatedBy
 */
class MakeProduct extends \soft\db\ActiveRecord
{
    //<editor-fold desc="Parent" defaultstate="collapsed">

    /**
     * {@inheritdoc}
     */
    public $residual;
    const TYPE_FACTORY = 1;

    public static function tableName()
    {
        return 'make_product';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['employee_id', 'product_id',], 'required'],
            [['employee_id', 'product_id', 'per_metr_expence', 'per_metr_cost', 'produced_id', 'shape_id', 'type_id', 'created_at', 'updated_at', 'created_by', 'updated_by', 'total_expence'], 'integer'],
            [['date'], 'safe'],
            [['comment'], 'string', 'max' => 255],
            [['size', 'factory_size'], 'number',],
            [['size',], 'checkBeforeMakeMetr'],
            [['size', 'factory_size'], 'checkNumber',],
            ['date', 'default', 'value' => time()],
            [['created_by'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['created_by' => 'id']],
            [['employee_id'], 'exist', 'skipOnError' => true, 'targetClass' => Employees::className(), 'targetAttribute' => ['employee_id' => 'id']],
            [['produced_id'], 'exist', 'skipOnError' => true, 'targetClass' => ProductList::className(), 'targetAttribute' => ['produced_id' => 'id']],
            [['product_id'], 'exist', 'skipOnError' => true, 'targetClass' => ProductList::className(), 'targetAttribute' => ['product_id' => 'id']],
            [['shape_id'], 'exist', 'skipOnError' => true, 'targetClass' => Shapes::className(), 'targetAttribute' => ['shape_id' => 'id']],
            [['updated_by'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['updated_by' => 'id']],
        ];
    }

    public function checkNumber()
    {

        if ($this->size < 0) {
            $this->addError('size', "Faqat musbat son kiritiladi");
            return false;
        } elseif ($this->factory_size < 0) {
            $this->addError('factory_size', "Faqat musbat son kiritiladi");
            return false;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function checkBeforeMakeMetr()
    {
        $product = $this->product;
        if ($product) {
            $residual = $product->residual;
            if ($this->size > $residual) {
                $residual = number_format($residual, 2);
                $this->addError('size', "Skladda buncha yuk yo'q! Hozir skladda '$product->product_name' mahsulot $residual  metr mavjud!");
                return false;
            }
        }
    }

    public function behaviors()
    {
        return [
            'yii\behaviors\TimestampBehavior',
            'yii\behaviors\BlameableBehavior',
            [
                'class' => TimestampConvertorBehavior::class,
                'attribute' => ['date'],
            ],
        ];
    }

    public function beforeSave($insert)
    {
        $course = DollarCourse::find()->one();
        $this->per_metr_expence = $this->produced->factory_expence ?? 0;
        $this->total_expence = $this->factory_size * $this->produced->factory_expence ?? 0;
        $result = intval(($this->size * $this->product->selling_price_usd * $course->course + $this->total_expence) / $this->factory_size);
        $this->per_metr_cost = $result;
        $produced = $this->produced;
        $produced->selling_price_uz = $result;
        $produced->save(false);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    /**
     * {@inheritdoc}
     */
    public function labels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'employee_id' => 'Xodim',
            'product_id' => 'Tovar turi',
            'size' => 'O\'lchami',
            'produced_id' => 'Mahsulot',
            'shape_id' => 'Shakli',
            'comment' => 'Izoh',
            'factory_size' => 'Tayyor mahsulot  o\'lchami',
            'per_metr_expence' => '1 metr uchun sarf harajat',
            'per_metr_cost' => '1 metr uchun narx',
            'total_expence' => 'Usluga',
            'type_id' => Yii::t('app', 'Type ID'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'created_by' => Yii::t('app', 'Created By'),
            'updated_by' => Yii::t('app', 'Updated By'),
        ];
    }
    //</editor-fold>

    //<editor-fold desc="Relations" defaultstate="collapsed">

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'created_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEmployee()
    {
        return $this->hasOne(Employees::className(), ['id' => 'employee_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProduced()
    {
        return $this->hasOne(ProductList::className(), ['id' => 'produced_id']);
    }


    public function getProduct()
    {
        return $this->hasOne(ProductList::className(), ['id' => 'product_id']);
    }

    public function getShape()
    {
        return $this->hasOne(Shapes::className(), ['id' => 'shape_id']);
    }

    public function getUpdatedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'updated_by']);
    }

    //</editor-fold>
}
